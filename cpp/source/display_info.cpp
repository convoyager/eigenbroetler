#include <display_info.h>

DisplayInfo *DisplayInfo::display_info = NULL;

inline DisplayInfo::ColourMap createColourMap()
{
    return QVector<QRgb>(DisplayInfo::COLOURMAP_SIZE);
}

void DisplayInfo::delete_map()
{
    delete DisplayInfo::display_info;
}

DisplayInfo::DisplayInfo()
{
    initialise_colour_maps();
}

void DisplayInfo::addColourMap(QString const& name, QRgb const *data)
{
    colour_maps[name] = createColourMap();
    for (int i = 0; i < COLOURMAP_SIZE; ++i)
        colour_maps[name][i] = data[i];
}

DisplayInfo::ColourMap DisplayInfo::getColourMap(QString const& pname) const
{
    QMap<QString, DisplayInfo::ColourMap>::const_iterator i = colour_maps.find(pname);
    if (i == colour_maps.end())
        return colour_maps[tr("Grey")];
    return colour_maps[pname];
}

void DisplayInfo::initialise_colour_maps()
{
    if (colour_maps.isEmpty()) {
        QRgb colours_full_spectrum[COLOURMAP_SIZE] = {
            0xffff00ff, 0xfffa00ff, 0xfff500ff, 0xfff000ff, 0xffeb00ff, 0xffe600ff, 0xffe100ff, 0xffdc00ff,
            0xffd700ff, 0xffd200ff, 0xffcd00ff, 0xffc800ff, 0xffc300ff, 0xffbe00ff, 0xffb900ff, 0xffb400ff,
            0xffaf00ff, 0xffaa00ff, 0xffa500ff, 0xffa000ff, 0xff9b00ff, 0xff9600ff, 0xff9100ff, 0xff8c00ff,
            0xff8700ff, 0xff8200ff, 0xff7d00ff, 0xff7800ff, 0xff7300ff, 0xff6e00ff, 0xff6900ff, 0xff6400ff,
            0xff5f00ff, 0xff5a00ff, 0xff5500ff, 0xff5000ff, 0xff4b00ff, 0xff4600ff, 0xff4100ff, 0xff3c00ff,
            0xff3700ff, 0xff3200ff, 0xff2d00ff, 0xff2800ff, 0xff2300ff, 0xff1e00ff, 0xff1900ff, 0xff1400ff,
            0xff0f00ff, 0xff0a00ff, 0xff0500ff, 0xff0000ff, 0xff0005ff, 0xff000aff, 0xff000fff, 0xff0014ff,
            0xff0019ff, 0xff001eff, 0xff0023ff, 0xff0028ff, 0xff002dff, 0xff0032ff, 0xff0037ff, 0xff003cff,
            0xff0041ff, 0xff0046ff, 0xff004bff, 0xff0050ff, 0xff0055ff, 0xff005aff, 0xff005fff, 0xff0064ff,
            0xff0069ff, 0xff006eff, 0xff0073ff, 0xff0078ff, 0xff007dff, 0xff0082ff, 0xff0087ff, 0xff008cff,
            0xff0091ff, 0xff0096ff, 0xff009bff, 0xff00a0ff, 0xff00a5ff, 0xff00aaff, 0xff00afff, 0xff00b4ff,
            0xff00b9ff, 0xff00beff, 0xff00c3ff, 0xff00c8ff, 0xff00cdff, 0xff00d2ff, 0xff00d7ff, 0xff00dcff,
            0xff00e1ff, 0xff00e6ff, 0xff00ebff, 0xff00f0ff, 0xff00f5ff, 0xff00fbff, 0xff00ffff, 0xff00fffa,
            0xff00fff5, 0xff00fff0, 0xff00ffeb, 0xff00ffe6, 0xff00ffe1, 0xff00ffdc, 0xff00ffd7, 0xff00ffd2,
            0xff00ffcd, 0xff00ffc8, 0xff00ffc3, 0xff00ffbe, 0xff00ffb9, 0xff00ffb4, 0xff00ffaf, 0xff00ffaa,
            0xff00ffa5, 0xff00ffa0, 0xff00ff9b, 0xff00ff96, 0xff00ff91, 0xff00ff8c, 0xff00ff87, 0xff00ff82,
            0xff00ff7d, 0xff00ff78, 0xff00ff73, 0xff00ff6e, 0xff00ff69, 0xff00ff64, 0xff00ff5f, 0xff00ff5a,
            0xff00ff55, 0xff00ff50, 0xff00ff4b, 0xff00ff46, 0xff00ff41, 0xff00ff3c, 0xff00ff37, 0xff00ff32,
            0xff00ff2d, 0xff00ff28, 0xff00ff23, 0xff00ff1e, 0xff00ff19, 0xff00ff14, 0xff00ff0f, 0xff00ff0a,
            0xff00ff05, 0xff00ff00, 0xff05ff00, 0xff0aff00, 0xff0fff00, 0xff14ff00, 0xff19ff00, 0xff1eff00,
            0xff23ff00, 0xff28ff00, 0xff2dff00, 0xff32ff00, 0xff37ff00, 0xff3cff00, 0xff41ff00, 0xff46ff00,
            0xff4bff00, 0xff50ff00, 0xff55ff00, 0xff5aff00, 0xff5fff00, 0xff64ff00, 0xff69ff00, 0xff6eff00,
            0xff73ff00, 0xff78ff00, 0xff7dff00, 0xff82ff00, 0xff87ff00, 0xff8cff00, 0xff91ff00, 0xff96ff00,
            0xff9bff00, 0xffa0ff00, 0xffa5ff00, 0xffaaff00, 0xffafff00, 0xffb4ff00, 0xffb9ff00, 0xffbeff00,
            0xffc3ff00, 0xffc8ff00, 0xffcdff00, 0xffd2ff00, 0xffd7ff00, 0xffdcff00, 0xffe1ff00, 0xffe6ff00,
            0xffebff00, 0xfff0ff00, 0xfff5ff00, 0xfffaff00, 0xffffff00, 0xfffffa00, 0xfffff500, 0xfffff000,
            0xffffeb00, 0xffffe600, 0xffffe100, 0xffffdc00, 0xffffd700, 0xffffd200, 0xffffcd00, 0xffffc800,
            0xffffc300, 0xffffbe00, 0xffffb900, 0xffffb400, 0xffffaf00, 0xffffaa00, 0xffffa500, 0xffffa000,
            0xffff9b00, 0xffff9600, 0xffff9100, 0xffff8c00, 0xffff8700, 0xffff8200, 0xffff7d00, 0xffff7800,
            0xffff7300, 0xffff6e00, 0xffff6900, 0xffff6400, 0xffff5f00, 0xffff5a00, 0xffff5500, 0xffff5000,
            0xffff4b00, 0xffff4600, 0xffff4100, 0xffff3c00, 0xffff3700, 0xffff3200, 0xffff2d00, 0xffff2800,
            0xffff2300, 0xffff1e00, 0xffff1900, 0xffff1400, 0xffff0f00, 0xffff0a00, 0xffff0500, 0xffff0000,
        };
        addColourMap(tr("Spectrum"), colours_full_spectrum);
        QRgb colours_thresh2[COLOURMAP_SIZE] = {
            0xff0000ff, 0xff010101, 0xff020202, 0xff030303, 0xff040404, 0xff050505, 0xff060606, 0xff070707,
            0xff080808, 0xff090909, 0xff0a0a0a, 0xff0b0b0b, 0xff0c0c0c, 0xff0d0d0d, 0xff0e0e0e, 0xff0f0f0f,
            0xff101010, 0xff111111, 0xff121212, 0xff131313, 0xff141414, 0xff151515, 0xff161616, 0xff171717,
            0xff181818, 0xff191919, 0xff1a1a1a, 0xff1b1b1b, 0xff1c1c1c, 0xff1d1d1d, 0xff1e1e1e, 0xff1f1f1f,
            0xff202020, 0xff212121, 0xff222222, 0xff232323, 0xff242424, 0xff252525, 0xff262626, 0xff272727,
            0xff282828, 0xff292929, 0xff2a2a2a, 0xff2b2b2b, 0xff2c2c2c, 0xff2d2d2d, 0xff2e2e2e, 0xff2f2f2f,
            0xff303030, 0xff313131, 0xff323232, 0xff333333, 0xff343434, 0xff353535, 0xff363636, 0xff373737,
            0xff383838, 0xff393939, 0xff3a3a3a, 0xff3b3b3b, 0xff3c3c3c, 0xff3d3d3d, 0xff3e3e3e, 0xff3f3f3f,
            0xff404040, 0xff414141, 0xff424242, 0xff434343, 0xff444444, 0xff454545, 0xff464646, 0xff474747,
            0xff484848, 0xff494949, 0xff4a4a4a, 0xff4b4b4b, 0xff4c4c4c, 0xff4d4d4d, 0xff4e4e4e, 0xff4f4f4f,
            0xff505050, 0xff515151, 0xff525252, 0xff535353, 0xff545454, 0xff555555, 0xff565656, 0xff575757,
            0xff585858, 0xff595959, 0xff5a5a5a, 0xff5b5b5b, 0xff5c5c5c, 0xff5d5d5d, 0xff5e5e5e, 0xff5f5f5f,
            0xff606060, 0xff616161, 0xff626262, 0xff636363, 0xff646464, 0xff656565, 0xff666666, 0xff676767,
            0xff686868, 0xff696969, 0xff6a6a6a, 0xff6b6b6b, 0xff6c6c6c, 0xff6d6d6d, 0xff6e6e6e, 0xff6f6f6f,
            0xff707070, 0xff717171, 0xff727272, 0xff737373, 0xff747474, 0xff757575, 0xff767676, 0xff777777,
            0xff787878, 0xff797979, 0xff7a7a7a, 0xff7b7b7b, 0xff7c7c7c, 0xff7d7d7d, 0xff7e7e7e, 0xff00ff00,
            0xff00ff00, 0xff818181, 0xff828282, 0xff838383, 0xff848484, 0xff858585, 0xff868686, 0xff878787,
            0xff888888, 0xff898989, 0xff8a8a8a, 0xff8b8b8b, 0xff8c8c8c, 0xff8d8d8d, 0xff8e8e8e, 0xff8f8f8f,
            0xff909090, 0xff919191, 0xff929292, 0xff939393, 0xff949494, 0xff959595, 0xff969696, 0xff979797,
            0xff989898, 0xff999999, 0xff9a9a9a, 0xff9b9b9b, 0xff9c9c9c, 0xff9d9d9d, 0xff9e9e9e, 0xff9f9f9f,
            0xffa0a0a0, 0xffa1a1a1, 0xffa2a2a2, 0xffa3a3a3, 0xffa4a4a4, 0xffa5a5a5, 0xffa6a6a6, 0xffa7a7a7,
            0xffa8a8a8, 0xffa9a9a9, 0xffaaaaaa, 0xffababab, 0xffacacac, 0xffadadad, 0xffaeaeae, 0xffafafaf,
            0xffb0b0b0, 0xffb1b1b1, 0xffb2b2b2, 0xffb3b3b3, 0xffb4b4b4, 0xffb5b5b5, 0xffb6b6b6, 0xffb7b7b7,
            0xffb8b8b8, 0xffb9b9b9, 0xffbababa, 0xffbbbbbb, 0xffbcbcbc, 0xffbdbdbd, 0xffbebebe, 0xffbfbfbf,
            0xffc0c0c0, 0xffc1c1c1, 0xffc2c2c2, 0xffc3c3c3, 0xffc4c4c4, 0xffc5c5c5, 0xffc6c6c6, 0xffc7c7c7,
            0xffc8c8c8, 0xffc9c9c9, 0xffcacaca, 0xffcbcbcb, 0xffcccccc, 0xffcdcdcd, 0xffcecece, 0xffcfcfcf,
            0xffd0d0d0, 0xffd1d1d1, 0xffd2d2d2, 0xffd3d3d3, 0xffd4d4d4, 0xffd5d5d5, 0xffd6d6d6, 0xffd7d7d7,
            0xffd8d8d8, 0xffd9d9d9, 0xffdadada, 0xffdbdbdb, 0xffdcdcdc, 0xffdddddd, 0xffdedede, 0xffdfdfdf,
            0xffe0e0e0, 0xffe1e1e1, 0xffe2e2e2, 0xffe3e3e3, 0xffe4e4e4, 0xffe5e5e5, 0xffe6e6e6, 0xffe7e7e7,
            0xffe8e8e8, 0xffe9e9e9, 0xffeaeaea, 0xffebebeb, 0xffececec, 0xffededed, 0xffeeeeee, 0xffefefef,
            0xfff0f0f0, 0xfff1f1f1, 0xfff2f2f2, 0xfff3f3f3, 0xfff4f4f4, 0xfff5f5f5, 0xfff6f6f6, 0xfff7f7f7,
            0xfff8f8f8, 0xfff9f9f9, 0xfffafafa, 0xfffbfbfb, 0xfffcfcfc, 0xfffdfdfd, 0xfffefefe, 0xffff0000,
        };
        addColourMap(tr("Threshold #2"), colours_thresh2);
        QRgb colours_green[COLOURMAP_SIZE] = {
            0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000400, 0xff000400,
            0xff000400, 0xff000400, 0xff000800, 0xff000800, 0xff000800, 0xff000800, 0xff000c00, 0xff000c00,
            0xff000c00, 0xff000c00, 0xff001000, 0xff001000, 0xff001000, 0xff001000, 0xff001400, 0xff001400,
            0xff001400, 0xff001400, 0xff001800, 0xff001800, 0xff001800, 0xff001800, 0xff001c00, 0xff001c00,
            0xff001c00, 0xff001c00, 0xff002000, 0xff002000, 0xff002000, 0xff002000, 0xff002400, 0xff002400,
            0xff002400, 0xff002400, 0xff002800, 0xff002800, 0xff002800, 0xff002800, 0xff002c00, 0xff002c00,
            0xff002c00, 0xff002c00, 0xff003000, 0xff003000, 0xff003000, 0xff003000, 0xff003400, 0xff003400,
            0xff003400, 0xff003400, 0xff003800, 0xff003800, 0xff003800, 0xff003800, 0xff003c00, 0xff003c00,
            0xff003c00, 0xff003c00, 0xff004000, 0xff004000, 0xff004000, 0xff004000, 0xff004400, 0xff004400,
            0xff004400, 0xff004400, 0xff004800, 0xff004800, 0xff004800, 0xff004800, 0xff004c00, 0xff004c00,
            0xff004c00, 0xff004c00, 0xff005000, 0xff005000, 0xff005000, 0xff005000, 0xff005400, 0xff005400,
            0xff005400, 0xff005400, 0xff005800, 0xff005800, 0xff005800, 0xff005800, 0xff005c00, 0xff005c00,
            0xff005c00, 0xff005c00, 0xff006000, 0xff006000, 0xff006000, 0xff006000, 0xff006400, 0xff006400,
            0xff006400, 0xff006400, 0xff006800, 0xff006800, 0xff006800, 0xff006800, 0xff006c00, 0xff006c00,
            0xff006c00, 0xff006c00, 0xff007000, 0xff007000, 0xff007000, 0xff007000, 0xff007400, 0xff007400,
            0xff007400, 0xff007400, 0xff007800, 0xff007800, 0xff007800, 0xff007800, 0xff007c00, 0xff007c00,
            0xff007c00, 0xff007c00, 0xff008000, 0xff008000, 0xff008000, 0xff008000, 0xff008400, 0xff008400,
            0xff008400, 0xff008400, 0xff008800, 0xff008800, 0xff008800, 0xff008800, 0xff008c00, 0xff008c00,
            0xff008c00, 0xff008c00, 0xff009000, 0xff009000, 0xff009000, 0xff009000, 0xff009400, 0xff009400,
            0xff009400, 0xff009400, 0xff009800, 0xff009800, 0xff009800, 0xff009800, 0xff009c00, 0xff009c00,
            0xff009c00, 0xff009c00, 0xff00a000, 0xff00a000, 0xff00a000, 0xff00a000, 0xff00a400, 0xff00a400,
            0xff00a400, 0xff00a400, 0xff00a800, 0xff00a800, 0xff00a800, 0xff00a800, 0xff00ac00, 0xff00ac00,
            0xff00ac00, 0xff00ac00, 0xff00b000, 0xff00b000, 0xff00b000, 0xff00b000, 0xff00b400, 0xff00b400,
            0xff00b400, 0xff00b400, 0xff00b800, 0xff00b800, 0xff00b800, 0xff00b800, 0xff00bc00, 0xff00bc00,
            0xff00bc00, 0xff00bc00, 0xff00c000, 0xff00c000, 0xff00c000, 0xff00c000, 0xff00c400, 0xff00c400,
            0xff00c400, 0xff00c400, 0xff00c800, 0xff00c800, 0xff00c800, 0xff00c800, 0xff00cc00, 0xff00cc00,
            0xff00cc00, 0xff00cc00, 0xff00d000, 0xff00d000, 0xff00d000, 0xff00d000, 0xff00d400, 0xff00d400,
            0xff00d400, 0xff00d400, 0xff00d800, 0xff00d800, 0xff00d800, 0xff00d800, 0xff00dc00, 0xff00dc00,
            0xff00dc00, 0xff00dc00, 0xff00e000, 0xff00e000, 0xff00e000, 0xff00e000, 0xff00e400, 0xff00e400,
            0xff00e400, 0xff00e400, 0xff00e800, 0xff00e800, 0xff00e800, 0xff00e800, 0xff00ec00, 0xff00ec00,
            0xff00ec00, 0xff00ec00, 0xff00f000, 0xff00f000, 0xff00f000, 0xff00f000, 0xff00f400, 0xff00f400,
            0xff00f400, 0xff00f400, 0xff00f800, 0xff00f800, 0xff00f800, 0xff00f800, 0xff00fc00, 0xff00fc00,
        };
        addColourMap(tr("Green"), colours_green);
        QRgb colours_spirals[COLOURMAP_SIZE] = {
            0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000,
            0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000,
            0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000,
            0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000,
            0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000,
            0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000,
            0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000,
            0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000, 0xffc00000,
            0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000,
            0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000,
            0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000,
            0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000,
            0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
            0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
            0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
            0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
            0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff,
            0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff,
            0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff,
            0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff,
            0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0,
            0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0,
            0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0,
            0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0, 0xff0000c0,
            0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080,
            0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080,
            0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080,
            0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080,
            0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00,
            0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00,
            0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00,
            0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00, 0xffffff00,
        };
        addColourMap(tr("Spirals"), colours_spirals);
        QRgb colours_rainbow[COLOURMAP_SIZE] = {
            0xff0202ff, 0xff0203ff, 0xff0204ff, 0xff0205ff, 0xff0205ff, 0xff0206ff, 0xff0207ff, 0xff0208ff,
            0xff0209ff, 0xff020aff, 0xff020bff, 0xff020cff, 0xff020dff, 0xff020eff, 0xff020fff, 0xff0210ff,
            0xff0211ff, 0xff0212ff, 0xff0213ff, 0xff0214ff, 0xff0216ff, 0xff0217ff, 0xff0218ff, 0xff021aff,
            0xff021bff, 0xff021cff, 0xff021eff, 0xff021fff, 0xff0220ff, 0xff0222ff, 0xff0223ff, 0xff0225ff,
            0xff0226ff, 0xff0228ff, 0xff0229ff, 0xff022bff, 0xff022dff, 0xff022eff, 0xff0230ff, 0xff0232ff,
            0xff0234ff, 0xff0236ff, 0xff0237ff, 0xff0239ff, 0xff023bff, 0xff023dff, 0xff023fff, 0xff0242ff,
            0xff0244ff, 0xff0246ff, 0xff0248ff, 0xff024aff, 0xff024dff, 0xff024fff, 0xff0251ff, 0xff0254ff,
            0xff0256ff, 0xff0259ff, 0xff025bff, 0xff025eff, 0xff0261ff, 0xff0264ff, 0xff0267ff, 0xff0269ff,
            0xff026cff, 0xff0270ff, 0xff0273ff, 0xff0276ff, 0xff0279ff, 0xff027dff, 0xff0280ff, 0xff0283ff,
            0xff0287ff, 0xff028bff, 0xff028eff, 0xff0292ff, 0xff0296ff, 0xff029aff, 0xff029eff, 0xff02a2ff,
            0xff02a6ff, 0xff02abff, 0xff02afff, 0xff02b3ff, 0xff02b8ff, 0xff02bdff, 0xff02c2ff, 0xff02c7ff,
            0xff02ccff, 0xff02d0ff, 0xff02d6ff, 0xff02dbff, 0xff02e1ff, 0xff02e7ff, 0xff02ecff, 0xff02f2ff,
            0xff02faff, 0xff02fff6, 0xff02ffe9, 0xff02ffdd, 0xff02ffd0, 0xff02ffc3, 0xff02ffb7, 0xff02ffad,
            0xff02ffa4, 0xff02ff9a, 0xff02ff91, 0xff02ff88, 0xff02ff7e, 0xff02ff76, 0xff02ff6e, 0xff02ff67,
            0xff02ff60, 0xff02ff58, 0xff02ff51, 0xff02ff49, 0xff02ff43, 0xff02ff3d, 0xff02ff37, 0xff02ff31,
            0xff02ff2b, 0xff02ff25, 0xff02ff1f, 0xff02ff1a, 0xff02ff15, 0xff02ff0f, 0xff02ff0a, 0xff02ff05,
            0xff05ff02, 0xff0aff02, 0xff0fff02, 0xff14ff02, 0xff19ff02, 0xff1eff02, 0xff23ff02, 0xff29ff02,
            0xff2eff02, 0xff33ff02, 0xff39ff02, 0xff3eff02, 0xff44ff02, 0xff49ff02, 0xff4fff02, 0xff55ff02,
            0xff5aff02, 0xff60ff02, 0xff66ff02, 0xff6cff02, 0xff72ff02, 0xff78ff02, 0xff7eff02, 0xff84ff02,
            0xff8aff02, 0xff90ff02, 0xff97ff02, 0xff9eff02, 0xffa4ff02, 0xffabff02, 0xffb2ff02, 0xffb8ff02,
            0xffbfff02, 0xffc7ff02, 0xffceff02, 0xffd5ff02, 0xffddff02, 0xffe4ff02, 0xffebff02, 0xfff3ff02,
            0xfffbff02, 0xfffffb02, 0xfffff302, 0xffffeb02, 0xffffe302, 0xffffde02, 0xffffd902, 0xffffd402,
            0xffffcf02, 0xffffcb02, 0xffffc602, 0xffffc102, 0xffffbd02, 0xffffb802, 0xffffb402, 0xffffb002,
            0xffffac02, 0xffffa702, 0xffffa402, 0xffffa002, 0xffff9c02, 0xffff9802, 0xffff9502, 0xffff9102,
            0xffff8d02, 0xffff8a02, 0xffff8702, 0xffff8302, 0xffff8002, 0xffff7d02, 0xffff7a02, 0xffff7702,
            0xffff7402, 0xffff7102, 0xffff6e02, 0xffff6b02, 0xffff6802, 0xffff6502, 0xffff6202, 0xffff6002,
            0xffff5d02, 0xffff5a02, 0xffff5802, 0xffff5502, 0xffff5302, 0xffff5002, 0xffff4e02, 0xffff4c02,
            0xffff4902, 0xffff4702, 0xffff4502, 0xffff4202, 0xffff4002, 0xffff3e02, 0xffff3c02, 0xffff3a02,
            0xffff3802, 0xffff3602, 0xffff3402, 0xffff3202, 0xffff2f02, 0xffff2d02, 0xffff2c02, 0xffff2a02,
            0xffff2802, 0xffff2602, 0xffff2402, 0xffff2202, 0xffff2002, 0xffff1f02, 0xffff1d02, 0xffff1b02,
            0xffff1a02, 0xffff1802, 0xffff1602, 0xffff1502, 0xffff1302, 0xffff1102, 0xffff1002, 0xffff0e02,
            0xffff0c02, 0xffff0b02, 0xffff0902, 0xffff0802, 0xffff0602, 0xffff0502, 0xffff0402, 0xffff0202,
        };
        addColourMap(tr("Rainbow"), colours_rainbow);
        QRgb colours_astro[COLOURMAP_SIZE] = {
            0xff00002a, 0xff01012b, 0xff02022c, 0xff03032d, 0xff04042d, 0xff05052e, 0xff06062f, 0xff070730,
            0xff080831, 0xff090932, 0xff0a0a32, 0xff0b0b33, 0xff0c0c34, 0xff0d0d35, 0xff0e0e36, 0xff0f0f37,
            0xff101037, 0xff111138, 0xff121239, 0xff13133a, 0xff14143b, 0xff15153c, 0xff16163c, 0xff17173d,
            0xff18183e, 0xff19193f, 0xff1a1a40, 0xff1b1b41, 0xff1c1c41, 0xff1d1d42, 0xff1e1e43, 0xff1f1f44,
            0xff202045, 0xff212146, 0xff222246, 0xff232347, 0xff242448, 0xff252549, 0xff26264a, 0xff27274b,
            0xff28284b, 0xff29294c, 0xff2a2a4d, 0xff2b2b4e, 0xff2c2c4f, 0xff2d2d50, 0xff2e2e50, 0xff2f2f51,
            0xff303052, 0xff313153, 0xff323254, 0xff333355, 0xff343455, 0xff353556, 0xff363657, 0xff373758,
            0xff383859, 0xff39395a, 0xff3a3a5a, 0xff3b3b5b, 0xff3c3c5c, 0xff3d3d5d, 0xff3e3e5e, 0xff3f3f5f,
            0xff40405f, 0xff414160, 0xff424261, 0xff434362, 0xff444463, 0xff454564, 0xff464664, 0xff474765,
            0xff484866, 0xff494967, 0xff4a4a68, 0xff4b4b69, 0xff4c4c69, 0xff4d4d6a, 0xff4e4e6b, 0xff4f4f6c,
            0xff50506d, 0xff51516d, 0xff52526e, 0xff53536f, 0xff545470, 0xff555571, 0xff565672, 0xff575773,
            0xff585873, 0xff595974, 0xff5a5a75, 0xff5b5b76, 0xff5c5c77, 0xff5d5d78, 0xff5e5e78, 0xff5f5f79,
            0xff60607a, 0xff61617b, 0xff62627c, 0xff63637d, 0xff64647d, 0xff65657e, 0xff66667f, 0xff676780,
            0xff686881, 0xff696982, 0xff6a6a82, 0xff6b6b83, 0xff6c6c84, 0xff6d6d85, 0xff6e6e86, 0xff6f6f87,
            0xff707087, 0xff717188, 0xff727289, 0xff73738a, 0xff74748b, 0xff75758c, 0xff76768c, 0xff77778d,
            0xff78788e, 0xff79798f, 0xff7a7a90, 0xff7b7b91, 0xff7c7c91, 0xff7d7d92, 0xff7e7e93, 0xff7f7f94,
            0xff808095, 0xff818196, 0xff828296, 0xff838397, 0xff848498, 0xff858599, 0xff86869a, 0xff87879b,
            0xff88889b, 0xff89899c, 0xff8a8a9d, 0xff8b8b9e, 0xff8c8c9f, 0xff8d8da0, 0xff8e8ea0, 0xff8f8fa1,
            0xff9090a2, 0xff9191a3, 0xff9292a4, 0xff9393a4, 0xff9494a5, 0xff9595a6, 0xff9696a7, 0xff9797a8,
            0xff9898a9, 0xff9999aa, 0xff9a9aaa, 0xff9b9bab, 0xff9c9cac, 0xff9d9dad, 0xff9e9eae, 0xff9f9faf,
            0xffa0a0af, 0xffa1a1b0, 0xffa2a2b1, 0xffa3a3b2, 0xffa4a4b3, 0xffa5a5b4, 0xffa6a6b4, 0xffa7a7b5,
            0xffa8a8b6, 0xffa9a9b7, 0xffaaaab8, 0xffababb9, 0xffacacb9, 0xffadadba, 0xffaeaebb, 0xffafafbc,
            0xffb0b0bd, 0xffb1b1be, 0xffb2b2be, 0xffb3b3bf, 0xffb4b4c0, 0xffb5b5c1, 0xffb6b6c2, 0xffb7b7c3,
            0xffb8b8c3, 0xffb9b9c4, 0xffbabac5, 0xffbbbbc6, 0xffbcbcc7, 0xffbdbdc8, 0xffbebec8, 0xffbfbfc9,
            0xffc0c0ca, 0xffc1c1cb, 0xffc2c2cc, 0xffc3c3cc, 0xffc4c4cd, 0xffc5c5ce, 0xffc6c6cf, 0xffc7c7d0,
            0xffc8c8d1, 0xffc9c9d2, 0xffcacad2, 0xffcbcbd3, 0xffccccd4, 0xffcdcdd5, 0xffceced6, 0xffcfcfd7,
            0xffd0d0d7, 0xffd1d1d8, 0xffd2d2d9, 0xffd3d3da, 0xffd4d4db, 0xffd5d5dc, 0xffd6d6dc, 0xffd7d7dd,
            0xffd8d8de, 0xffd9d9df, 0xffdadae0, 0xffdbdbe1, 0xffdcdce1, 0xffdddde2, 0xffdedee3, 0xffdfdfe4,
            0xffe0e0e5, 0xffe1e1e6, 0xffe2e2e6, 0xffe3e3e7, 0xffe4e4e8, 0xffe5e5e9, 0xffe6e6ea, 0xffe7e7eb,
            0xffe8e8eb, 0xffe9e9ec, 0xffeaeaed, 0xffebebee, 0xffececef, 0xffededf0, 0xffeeeef0, 0xffefeff1,
            0xfff0f0f2, 0xfff1f1f3, 0xfff2f2f4, 0xfff3f3f4, 0xfff4f4f5, 0xfff5f5f6, 0xfff6f6f7, 0xfff7f7f8,
            0xfff8f8f9, 0xfff9f9fa, 0xfffafafa, 0xfffbfbfb, 0xfffcfcfc, 0xfffdfdfd, 0xfffefefe, 0xffffffff,
        };
        addColourMap(tr("Astro"), colours_astro);
        QRgb colours_injector[COLOURMAP_SIZE] = {
            0xff3c3c3c, 0xff3c3c3c, 0xff403838, 0xff443838, 0xff483434, 0xff4c3434, 0xff503030, 0xff503030,
            0xff542c2c, 0xff582c2c, 0xff5c2828, 0xff602828, 0xff642424, 0xff642424, 0xff682020, 0xff6c2020,
            0xff701c1c, 0xff741c1c, 0xff781818, 0xff781818, 0xff7c1414, 0xff801414, 0xff841010, 0xff881010,
            0xff8c0c0c, 0xff8c0c0c, 0xff900808, 0xff940808, 0xff980404, 0xff9c0404, 0xffa00000, 0xffa00000,
            0xffa40000, 0xffa80000, 0xffac0000, 0xffac0000, 0xffb00000, 0xffb40000, 0xffb80000, 0xffb80000,
            0xffbc0000, 0xffc00000, 0xffc00000, 0xffc40000, 0xffc80000, 0xffcc0000, 0xffcc0000, 0xffd00000,
            0xffd40000, 0xffd40000, 0xffd80000, 0xffdc0000, 0xffe00000, 0xffe00000, 0xffe40000, 0xffe80000,
            0xffe80000, 0xffec0000, 0xfff00000, 0xfff40000, 0xfff40000, 0xfff80000, 0xfffc0000, 0xfffc0000,
            0xfffc0400, 0xfffc0800, 0xfffc0c00, 0xfffc1000, 0xfffc1400, 0xfffc1800, 0xfffc1c00, 0xfffc2000,
            0xfffc2400, 0xfffc2800, 0xfffc2c00, 0xfffc3000, 0xfffc3400, 0xfffc3800, 0xfffc3c00, 0xfffc3c00,
            0xfffc4000, 0xfffc4400, 0xfffc4800, 0xfffc4c00, 0xfffc5000, 0xfffc5400, 0xfffc5800, 0xfffc5c00,
            0xfffc6000, 0xfffc6400, 0xfffc6800, 0xfffc6c00, 0xfffc7000, 0xfffc7400, 0xfffc7800, 0xfffc7800,
            0xfffc7c04, 0xfffc8008, 0xfffc800c, 0xfffc8410, 0xfffc8414, 0xfffc8818, 0xfffc881c, 0xfffc8c20,
            0xfffc8c24, 0xfffc9028, 0xfffc902c, 0xfffc9430, 0xfffc9434, 0xfffc9838, 0xfffc983c, 0xfffc9c40,
            0xfffc9c44, 0xfffca048, 0xfffca04c, 0xfffca450, 0xfffca454, 0xfffca858, 0xfffca85c, 0xfffcac60,
            0xfffcac64, 0xfffcb068, 0xfffcb06c, 0xfffcb470, 0xfffcb474, 0xfffcb878, 0xfffcb87c, 0xfffcbc80,
            0xfffcc084, 0xfffcc088, 0xfffcc48c, 0xfffcc490, 0xfffcc894, 0xfffcc898, 0xfffccc9c, 0xfffccca0,
            0xfffcd0a4, 0xfffcd0a8, 0xfffcd4ac, 0xfffcd4b0, 0xfffcd8b4, 0xfffcd8b8, 0xfffcdcbc, 0xfffcdcc0,
            0xfffce0c4, 0xfffce0c8, 0xfffce4cc, 0xfffce4d0, 0xfffce8d4, 0xfffce8d8, 0xfffcecdc, 0xfffcece0,
            0xfffcf0e4, 0xfffcf0e8, 0xfffcf4ec, 0xfffcf4f0, 0xfffcf8f4, 0xfffcf8f8, 0xfffcfcfc, 0xfffcfcfc,
            0xfffcfcf4, 0xfffcfcec, 0xfffcfce4, 0xfffcfcdc, 0xfffcfcd4, 0xfffcfccc, 0xfffcfcc4, 0xfffcfcbc,
            0xfffcfcb4, 0xfffcfcac, 0xfffcfca4, 0xfffcfc9c, 0xfffcfc94, 0xfffcfc8c, 0xfffcfc84, 0xfffcfc7c,
            0xfffcfc74, 0xfffcfc6c, 0xfffcfc64, 0xfffcfc5c, 0xfffcfc54, 0xfffcfc4c, 0xfffcfc44, 0xfffcfc3c,
            0xfffcfc34, 0xfffcfc2c, 0xfffcfc24, 0xfffcfc1c, 0xfffcfc14, 0xfffcfc0c, 0xfffcfc04, 0xfffcfc00,
            0xfffcf400, 0xfffcec00, 0xfffce400, 0xfffcdc00, 0xfffcd400, 0xfffccc00, 0xfffcc400, 0xfffcbc00,
            0xfffcb400, 0xfffcac00, 0xfffca400, 0xfffc9c00, 0xfffc9400, 0xfffc8c00, 0xfffc8400, 0xfffc7c00,
            0xfffc7400, 0xfffc6c00, 0xfffc6400, 0xfffc5c00, 0xfffc5400, 0xfffc4c00, 0xfffc4400, 0xfffc3c00,
            0xfffc3400, 0xfffc2c00, 0xfffc2400, 0xfffc1c00, 0xfffc1400, 0xfffc0c00, 0xfffc0400, 0xfffc0000,
            0xfff40404, 0xffec0404, 0xffe80808, 0xffe00808, 0xffdc0c0c, 0xffd40c0c, 0xffd01010, 0xffc81010,
            0xffc41414, 0xffbc1414, 0xffb41818, 0xffb01818, 0xffa81c1c, 0xffa41c1c, 0xff9c2020, 0xff982020,
            0xff902424, 0xff8c2424, 0xff842828, 0xff802828, 0xff782c2c, 0xff702c2c, 0xff6c3030, 0xff643030,
            0xff603434, 0xff583434, 0xff543838, 0xff4c3838, 0xff483c3c, 0xff403c3c, 0xff3c3c3c,
        };
        addColourMap(tr("Injector"), colours_injector);
        QRgb colours_thresh[COLOURMAP_SIZE] = {
            0xff0000ff, 0xff010101, 0xff020202, 0xff030303, 0xff040404, 0xff050505, 0xff060606, 0xff070707,
            0xff080808, 0xff090909, 0xff0a0a0a, 0xff0b0b0b, 0xff0c0c0c, 0xff0d0d0d, 0xff0e0e0e, 0xff0f0f0f,
            0xff101010, 0xff111111, 0xff121212, 0xff131313, 0xff141414, 0xff151515, 0xff161616, 0xff171717,
            0xff181818, 0xff191919, 0xff1a1a1a, 0xff1b1b1b, 0xff1c1c1c, 0xff1d1d1d, 0xff1e1e1e, 0xff1f1f1f,
            0xff202020, 0xff212121, 0xff222222, 0xff232323, 0xff242424, 0xff252525, 0xff262626, 0xff272727,
            0xff282828, 0xff292929, 0xff2a2a2a, 0xff2b2b2b, 0xff2c2c2c, 0xff2d2d2d, 0xff2e2e2e, 0xff2f2f2f,
            0xff303030, 0xff313131, 0xff323232, 0xff333333, 0xff343434, 0xff353535, 0xff363636, 0xff373737,
            0xff383838, 0xff393939, 0xff3a3a3a, 0xff3b3b3b, 0xff3c3c3c, 0xff3d3d3d, 0xff3e3e3e, 0xff3f3f3f,
            0xff404040, 0xff414141, 0xff424242, 0xff434343, 0xff444444, 0xff454545, 0xff464646, 0xff474747,
            0xff484848, 0xff494949, 0xff4a4a4a, 0xff4b4b4b, 0xff4c4c4c, 0xff4d4d4d, 0xff4e4e4e, 0xff4f4f4f,
            0xff505050, 0xff515151, 0xff525252, 0xff535353, 0xff545454, 0xff555555, 0xff565656, 0xff575757,
            0xff585858, 0xff595959, 0xff5a5a5a, 0xff5b5b5b, 0xff5c5c5c, 0xff5d5d5d, 0xff5e5e5e, 0xff5f5f5f,
            0xff606060, 0xff616161, 0xff626262, 0xff636363, 0xff646464, 0xff656565, 0xff666666, 0xff676767,
            0xff686868, 0xff696969, 0xff6a6a6a, 0xff6b6b6b, 0xff6c6c6c, 0xff6d6d6d, 0xff6e6e6e, 0xff6f6f6f,
            0xff707070, 0xff717171, 0xff727272, 0xff737373, 0xff747474, 0xff757575, 0xff767676, 0xff777777,
            0xff787878, 0xff797979, 0xff7a7a7a, 0xff7b7b7b, 0xff7c7c7c, 0xff7d7d7d, 0xff7e7e7e, 0xff7f7f7f,
            0xff808080, 0xff818181, 0xff828282, 0xff838383, 0xff848484, 0xff858585, 0xff868686, 0xff878787,
            0xff888888, 0xff898989, 0xff8a8a8a, 0xff8b8b8b, 0xff8c8c8c, 0xff8d8d8d, 0xff8e8e8e, 0xff8f8f8f,
            0xff909090, 0xff919191, 0xff929292, 0xff939393, 0xff949494, 0xff959595, 0xff969696, 0xff979797,
            0xff989898, 0xff999999, 0xff9a9a9a, 0xff9b9b9b, 0xff9c9c9c, 0xff9d9d9d, 0xff9e9e9e, 0xff9f9f9f,
            0xffa0a0a0, 0xffa1a1a1, 0xffa2a2a2, 0xffa3a3a3, 0xffa4a4a4, 0xffa5a5a5, 0xffa6a6a6, 0xffa7a7a7,
            0xffa8a8a8, 0xffa9a9a9, 0xffaaaaaa, 0xffababab, 0xffacacac, 0xffadadad, 0xffaeaeae, 0xffafafaf,
            0xffb0b0b0, 0xffb1b1b1, 0xffb2b2b2, 0xffb3b3b3, 0xffb4b4b4, 0xffb5b5b5, 0xffb6b6b6, 0xffb7b7b7,
            0xffb8b8b8, 0xffb9b9b9, 0xffbababa, 0xffbbbbbb, 0xffbcbcbc, 0xffbdbdbd, 0xffbebebe, 0xffbfbfbf,
            0xffc0c0c0, 0xffc1c1c1, 0xffc2c2c2, 0xffc3c3c3, 0xffc4c4c4, 0xffc5c5c5, 0xffc6c6c6, 0xffc7c7c7,
            0xffc8c8c8, 0xffc9c9c9, 0xffcacaca, 0xffcbcbcb, 0xffcccccc, 0xffcdcdcd, 0xffcecece, 0xffcfcfcf,
            0xffd0d0d0, 0xffd1d1d1, 0xffd2d2d2, 0xffd3d3d3, 0xffd4d4d4, 0xffd5d5d5, 0xffd6d6d6, 0xffd7d7d7,
            0xffd8d8d8, 0xffd9d9d9, 0xffdadada, 0xffdbdbdb, 0xffdcdcdc, 0xffdddddd, 0xffdedede, 0xffdfdfdf,
            0xffe0e0e0, 0xffe1e1e1, 0xffe2e2e2, 0xffe3e3e3, 0xffe4e4e4, 0xffe5e5e5, 0xffe6e6e6, 0xffe7e7e7,
            0xffe8e8e8, 0xffe9e9e9, 0xffeaeaea, 0xffebebeb, 0xffececec, 0xffededed, 0xffeeeeee, 0xffefefef,
            0xfff0f0f0, 0xfff1f1f1, 0xfff2f2f2, 0xfff3f3f3, 0xfff4f4f4, 0xfff5f5f5, 0xfff6f6f6, 0xfff7f7f7,
            0xfff8f8f8, 0xfff9f9f9, 0xfffafafa, 0xfffbfbfb, 0xfffcfcfc, 0xfffdfdfd, 0xfffefefe, 0xffff0000,
        };
        addColourMap(tr("Threshold #1"), colours_thresh);
        QRgb colours_lyapunov[COLOURMAP_SIZE] = {
            0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff040000, 0xff040000, 0xff040000, 0xff040000,
            0xff080000, 0xff080000, 0xff080000, 0xff080000, 0xff0c0000, 0xff0c0000, 0xff0c0000, 0xff0c0000,
            0xff100000, 0xff100000, 0xff100000, 0xff100000, 0xff140000, 0xff140000, 0xff140000, 0xff140000,
            0xff180000, 0xff180000, 0xff180000, 0xff180000, 0xff1c0000, 0xff1c0000, 0xff1c0000, 0xff1c0000,
            0xff200000, 0xff200000, 0xff200000, 0xff200000, 0xff240000, 0xff240000, 0xff240000, 0xff240000,
            0xff280000, 0xff280000, 0xff280000, 0xff280000, 0xff2c0000, 0xff2c0000, 0xff2c0000, 0xff2c0000,
            0xff300000, 0xff300000, 0xff300000, 0xff300000, 0xff340000, 0xff340000, 0xff340000, 0xff340000,
            0xff380000, 0xff380000, 0xff380000, 0xff380000, 0xff3c0000, 0xff3c0000, 0xff3c0000, 0xff3c0000,
            0xff400400, 0xff400400, 0xff400400, 0xff400400, 0xff440800, 0xff440800, 0xff440800, 0xff440800,
            0xff480c00, 0xff480c00, 0xff480c00, 0xff480c00, 0xff4c1000, 0xff4c1000, 0xff4c1000, 0xff4c1000,
            0xff501400, 0xff501400, 0xff501400, 0xff501400, 0xff541800, 0xff541800, 0xff541800, 0xff541800,
            0xff581c00, 0xff581c00, 0xff581c00, 0xff581c00, 0xff5c2000, 0xff5c2000, 0xff5c2000, 0xff5c2000,
            0xff602400, 0xff602400, 0xff602400, 0xff602400, 0xff642800, 0xff642800, 0xff642800, 0xff642800,
            0xff682c00, 0xff682c00, 0xff682c00, 0xff682c00, 0xff6c3000, 0xff6c3000, 0xff6c3000, 0xff6c3000,
            0xff703400, 0xff703400, 0xff703400, 0xff703400, 0xff743800, 0xff743800, 0xff743800, 0xff743800,
            0xff783c00, 0xff783c00, 0xff783c00, 0xff783c00, 0xff7c4000, 0xff7c4000, 0xff7c4000, 0xff7c4000,
            0xff804400, 0xff804400, 0xff804400, 0xff804400, 0xff844800, 0xff844800, 0xff844800, 0xff844800,
            0xff884c00, 0xff884c00, 0xff884c00, 0xff884c00, 0xff8c5000, 0xff8c5000, 0xff8c5000, 0xff8c5000,
            0xff905400, 0xff905400, 0xff905400, 0xff905400, 0xff945800, 0xff945800, 0xff945800, 0xff945800,
            0xff985c00, 0xff985c00, 0xff985c00, 0xff985c00, 0xff9c6000, 0xff9c6000, 0xff9c6000, 0xff9c6000,
            0xffa06400, 0xffa06400, 0xffa06400, 0xffa06400, 0xffa46800, 0xffa46800, 0xffa46800, 0xffa46800,
            0xffa86c00, 0xffa86c00, 0xffa86c00, 0xffa86c00, 0xffac7000, 0xffac7000, 0xffac7000, 0xffac7000,
            0xffb07400, 0xffb07400, 0xffb07400, 0xffb07400, 0xffb47800, 0xffb47800, 0xffb47800, 0xffb47800,
            0xffb87c00, 0xffb87c00, 0xffb87c00, 0xffb87c00, 0xffbc8000, 0xffbc8000, 0xffbc8000, 0xffbc8000,
            0xffc08400, 0xffc08400, 0xffc08400, 0xffc08400, 0xffc48800, 0xffc48800, 0xffc48800, 0xffc48800,
            0xffc88c00, 0xffc88c00, 0xffc88c00, 0xffc88c00, 0xffcc9000, 0xffcc9000, 0xffcc9000, 0xffcc9000,
            0xffd09400, 0xffd09400, 0xffd09400, 0xffd09400, 0xffd49800, 0xffd49800, 0xffd49800, 0xffd49800,
            0xffd89c00, 0xffd89c00, 0xffd89c00, 0xffd89c00, 0xffdca000, 0xffdca000, 0xffdca000, 0xffdca000,
            0xffe0a400, 0xffe0a400, 0xffe0a400, 0xffe0a400, 0xffe4a800, 0xffe4a800, 0xffe4a800, 0xffe4a800,
            0xffe8ac00, 0xffe8ac00, 0xffe8ac00, 0xffe8ac00, 0xffecb000, 0xffecb000, 0xffecb000, 0xffecb000,
            0xfff0b400, 0xfff0b400, 0xfff0b400, 0xfff0b400, 0xfff4b800, 0xfff4b800, 0xfff4b800, 0xfff4b800,
            0xfff8bc00, 0xfff8bc00, 0xfff8bc00, 0xfff8bc00, 0xfffcc000, 0xfffcc000, 0xfffcc000, 0xfffcc000,
        };
        addColourMap(tr("Lyapunov"), colours_lyapunov);
        QRgb colours_iron[COLOURMAP_SIZE] = {
            0xff160000, 0xff190000, 0xff1c0000, 0xff1f0000, 0xff220000, 0xff250000, 0xff280000, 0xff2b0000,
            0xff2e0000, 0xff310000, 0xff340000, 0xff370000, 0xff3a0000, 0xff3d0000, 0xff400000, 0xff430000,
            0xff460000, 0xff490000, 0xff4c0000, 0xff4f0000, 0xff520000, 0xff550000, 0xff580000, 0xff5b0000,
            0xff5e0000, 0xff610000, 0xff640000, 0xff670000, 0xff6a0000, 0xff6d0000, 0xff700000, 0xff730000,
            0xff760000, 0xff790000, 0xff7c0000, 0xff7f0000, 0xff820000, 0xff850000, 0xff880000, 0xff8b0000,
            0xff8e0000, 0xff910000, 0xff940000, 0xff970000, 0xff9a0000, 0xff9d0000, 0xffa00000, 0xffa30000,
            0xffa60000, 0xffa90000, 0xffac0000, 0xffaf0000, 0xffb20000, 0xffb50000, 0xffb80000, 0xffbb0000,
            0xffbe0000, 0xffc10000, 0xffc40000, 0xffc70000, 0xffca0000, 0xffcd0000, 0xffd00000, 0xffd30000,
            0xffd60000, 0xffd90000, 0xffdc0000, 0xffdf0000, 0xffe20000, 0xffe50000, 0xffe80000, 0xffeb0000,
            0xffee0000, 0xfff10000, 0xfff40000, 0xfff70000, 0xfffa0000, 0xfffd0000, 0xffff0000, 0xffff0000,
            0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0300, 0xffff0600,
            0xffff0900, 0xffff0c00, 0xffff0f00, 0xffff1200, 0xffff1500, 0xffff1800, 0xffff1b00, 0xffff1e00,
            0xffff2100, 0xffff2400, 0xffff2700, 0xffff2a00, 0xffff2d00, 0xffff3000, 0xffff3300, 0xffff3600,
            0xffff3900, 0xffff3c00, 0xffff3f00, 0xffff4200, 0xffff4500, 0xffff4800, 0xffff4b00, 0xffff4e00,
            0xffff5100, 0xffff5400, 0xffff5700, 0xffff5a00, 0xffff5d00, 0xffff6000, 0xffff6300, 0xffff6600,
            0xffff6900, 0xffff6c00, 0xffff6f00, 0xffff7200, 0xffff7500, 0xffff7800, 0xffff7b00, 0xffff7e00,
            0xffff8100, 0xffff8400, 0xffff8700, 0xffff8a00, 0xffff8d00, 0xffff9000, 0xffff9300, 0xffff9600,
            0xffff9900, 0xffff9c00, 0xffff9f00, 0xffffa200, 0xffffa500, 0xffffa800, 0xffffab00, 0xffffae00,
            0xffffb100, 0xffffb400, 0xffffb700, 0xffffba00, 0xffffbd00, 0xffffc000, 0xffffc300, 0xffffc600,
            0xffffc900, 0xffffcc00, 0xffffcf00, 0xffffd200, 0xffffd500, 0xffffd800, 0xffffdb00, 0xffffde00,
            0xffffe100, 0xffffe400, 0xffffe700, 0xffffea00, 0xffffed00, 0xfffff000, 0xfffff300, 0xfffff600,
            0xfffff900, 0xfffffc00, 0xffffff00, 0xffffff02, 0xffffff05, 0xffffff08, 0xffffff0b, 0xffffff0e,
            0xffffff11, 0xffffff14, 0xffffff17, 0xffffff1a, 0xffffff1d, 0xffffff20, 0xffffff23, 0xffffff26,
            0xffffff29, 0xffffff2c, 0xffffff2f, 0xffffff32, 0xffffff35, 0xffffff38, 0xffffff3b, 0xffffff3e,
            0xffffff41, 0xffffff44, 0xffffff47, 0xffffff4a, 0xffffff4d, 0xffffff50, 0xffffff53, 0xffffff56,
            0xffffff59, 0xffffff5c, 0xffffff5f, 0xffffff62, 0xffffff65, 0xffffff68, 0xffffff6b, 0xffffff6e,
            0xffffff71, 0xffffff74, 0xffffff77, 0xffffff7a, 0xffffff7d, 0xffffff80, 0xffffff83, 0xffffff86,
            0xffffff89, 0xffffff8c, 0xffffff8f, 0xffffff92, 0xffffff95, 0xffffff98, 0xffffff9b, 0xffffff9e,
            0xffffffa1, 0xffffffa4, 0xffffffa7, 0xffffffaa, 0xffffffad, 0xffffffb0, 0xffffffb3, 0xffffffb6,
            0xffffffb9, 0xffffffbc, 0xffffffbf, 0xffffffc2, 0xffffffc5, 0xffffffc8, 0xffffffcb, 0xffffffce,
            0xffffffd1, 0xffffffd4, 0xffffffd7, 0xffffffda, 0xffffffdd, 0xffffffe0, 0xffffffe3, 0xffffffe6,
            0xffffffe9, 0xffffffec, 0xffffffef, 0xfffffff2, 0xfffffff5, 0xfffffff8, 0xfffffffb, 0xfffffffe,
        };
        addColourMap(tr("Iron"), colours_iron);
        QRgb colours_royal[COLOURMAP_SIZE] = {
            0xff3c0050, 0xff3c0050, 0xff3c0050, 0xff3c0050, 0xff40084c, 0xff440c4c, 0xff48104c, 0xff4c1448,
            0xff4c1848, 0xff501c48, 0xff542044, 0xff582444, 0xff582844, 0xff5c2c40, 0xff603040, 0xff643440,
            0xff68383c, 0xff683c3c, 0xff6c403c, 0xff704438, 0xff744838, 0xff744c38, 0xff785034, 0xff7c5434,
            0xff805834, 0xff845c30, 0xff846030, 0xff886430, 0xff8c682c, 0xff906c2c, 0xff90702c, 0xff947428,
            0xff987828, 0xff9c7c28, 0xffa08024, 0xffa08424, 0xffa48824, 0xffa88c24, 0xffac9020, 0xffac9420,
            0xffb09820, 0xffb49c1c, 0xffb8a01c, 0xffb8a41c, 0xffbca818, 0xffc0ac18, 0xffc4b018, 0xffc8b414,
            0xffc8b814, 0xffccbc14, 0xffd0c010, 0xffd4c410, 0xffd4c810, 0xffd8cc0c, 0xffdcd00c, 0xffe0d40c,
            0xffe4d808, 0xffe4dc08, 0xffe8e008, 0xffece404, 0xfff0e804, 0xfff0ec04, 0xfff4f000, 0xfff8f400,
            0xfffcf800, 0xfffcfc00, 0xfffcfc04, 0xfffcfc08, 0xfffcfc0c, 0xfffcfc10, 0xfffcfc14, 0xfffcfc18,
            0xfffcfc1c, 0xfffcfc20, 0xfffcfc24, 0xfffcfc28, 0xfffcfc2c, 0xfffcfc30, 0xfffcfc34, 0xfffcfc38,
            0xfffcfc3c, 0xfffcfc40, 0xfffcfc44, 0xfffcfc48, 0xfffcfc4c, 0xfffcfc50, 0xfffcfc54, 0xfffcfc58,
            0xfffcfc5c, 0xfffcfc60, 0xfffcfc64, 0xfffcfc68, 0xfffcfc6c, 0xfffcfc70, 0xfffcfc74, 0xfffcfc78,
            0xfffcfc7c, 0xfffcfc80, 0xfffcfc84, 0xfffcfc88, 0xfffcfc8c, 0xfffcfc90, 0xfffcfc94, 0xfffcfc98,
            0xfffcfc9c, 0xfffcfca0, 0xfffcfca4, 0xfffcfca8, 0xfffcfcac, 0xfffcfcb0, 0xfffcfcb4, 0xfffcfcb8,
            0xfffcfcbc, 0xfffcfcc0, 0xfffcfcc4, 0xfffcfcc8, 0xfffcfccc, 0xfffcfcd0, 0xfffcfcd4, 0xfffcfcd8,
            0xfffcfcdc, 0xfffcfce0, 0xfffcfce4, 0xfffcfce8, 0xfffcfcec, 0xfffcfcf0, 0xfffcfcf4, 0xfffcfcf8,
            0xfffcfcfc, 0xfffcfcfc, 0xfff8f8f8, 0xfff4f4f8, 0xfff4f0f4, 0xfff0ecf4, 0xfff0e8f4, 0xffece4f0,
            0xffece0f0, 0xffe8dcf0, 0xffe8d8ec, 0xffe4d4ec, 0xffe4d0ec, 0xffe0cce8, 0xffe0c8e8, 0xffdcc4e4,
            0xffdcc0e4, 0xffd8bce4, 0xffd8b8e0, 0xffd4b4e0, 0xffd4b0e0, 0xffd0acdc, 0xffd0a8dc, 0xffcca4dc,
            0xffcca0d8, 0xffc89cd8, 0xffc898d8, 0xffc494d4, 0xffc490d4, 0xffc08cd0, 0xffc088d0, 0xffbc84d0,
            0xffbc80cc, 0xffb87ccc, 0xffb478cc, 0xffb474c8, 0xffb070c8, 0xffb06cc8, 0xffac68c4, 0xffac64c4,
            0xffa860c0, 0xffa85cc0, 0xffa458c0, 0xffa454bc, 0xffa050bc, 0xffa04cbc, 0xff9c48b8, 0xff9c44b8,
            0xff9840b8, 0xff983cb4, 0xff9438b4, 0xff9434b4, 0xff9030b0, 0xff902cb0, 0xff8c28ac, 0xff8c24ac,
            0xff8820ac, 0xff881ca8, 0xff8418a8, 0xff8414a8, 0xff8010a4, 0xff800ca4, 0xff7c08a4, 0xff7c04a0,
            0xff7800a0, 0xff7800a0, 0xff74009c, 0xff74009c, 0xff74009c, 0xff740098, 0xff700098, 0xff700098,
            0xff700094, 0xff700094, 0xff6c0094, 0xff6c0090, 0xff6c0090, 0xff6c0090, 0xff68008c, 0xff68008c,
            0xff68008c, 0xff680088, 0xff640088, 0xff640088, 0xff640084, 0xff640084, 0xff600084, 0xff600084,
            0xff600080, 0xff600080, 0xff600080, 0xff5c007c, 0xff5c007c, 0xff5c007c, 0xff5c0078, 0xff580078,
            0xff580078, 0xff580074, 0xff580074, 0xff540074, 0xff540070, 0xff540070, 0xff540070, 0xff50006c,
            0xff50006c, 0xff50006c, 0xff500068, 0xff4c0068, 0xff4c0068, 0xff4c0068, 0xff4c0064, 0xff4c0064,
            0xff480064, 0xff480060, 0xff480060, 0xff480060, 0xff44005c, 0xff44005c, 0xff44005c, 0xff440058,
            0xff400058, 0xff400058, 0xff400054, 0xff400054, 0xff3c0054, 0xff3c0050, 0xff3c0050,
        };
        addColourMap(tr("Royal"), colours_royal);
        QRgb colours_mono[COLOURMAP_SIZE] = {
            0xff000000, 0xff010101, 0xff020202, 0xff030303, 0xff040404, 0xff050505, 0xff060606, 0xff070707,
            0xff080808, 0xff090909, 0xff0a0a0a, 0xff0b0b0b, 0xff0c0c0c, 0xff0d0d0d, 0xff0e0e0e, 0xff0f0f0f,
            0xff101010, 0xff111111, 0xff121212, 0xff131313, 0xff141414, 0xff151515, 0xff161616, 0xff171717,
            0xff181818, 0xff191919, 0xff1a1a1a, 0xff1b1b1b, 0xff1c1c1c, 0xff1d1d1d, 0xff1e1e1e, 0xff1f1f1f,
            0xff202020, 0xff212121, 0xff222222, 0xff232323, 0xff242424, 0xff252525, 0xff262626, 0xff272727,
            0xff282828, 0xff292929, 0xff2a2a2a, 0xff2b2b2b, 0xff2c2c2c, 0xff2d2d2d, 0xff2e2e2e, 0xff2f2f2f,
            0xff303030, 0xff313131, 0xff323232, 0xff333333, 0xff343434, 0xff353535, 0xff363636, 0xff373737,
            0xff383838, 0xff393939, 0xff3a3a3a, 0xff3b3b3b, 0xff3c3c3c, 0xff3d3d3d, 0xff3e3e3e, 0xff3f3f3f,
            0xff404040, 0xff414141, 0xff424242, 0xff434343, 0xff444444, 0xff454545, 0xff464646, 0xff474747,
            0xff484848, 0xff494949, 0xff4a4a4a, 0xff4b4b4b, 0xff4c4c4c, 0xff4d4d4d, 0xff4e4e4e, 0xff4f4f4f,
            0xff505050, 0xff515151, 0xff525252, 0xff535353, 0xff545454, 0xff555555, 0xff565656, 0xff575757,
            0xff585858, 0xff595959, 0xff5a5a5a, 0xff5b5b5b, 0xff5c5c5c, 0xff5d5d5d, 0xff5e5e5e, 0xff5f5f5f,
            0xff606060, 0xff616161, 0xff626262, 0xff636363, 0xff646464, 0xff656565, 0xff666666, 0xff676767,
            0xff686868, 0xff696969, 0xff6a6a6a, 0xff6b6b6b, 0xff6c6c6c, 0xff6d6d6d, 0xff6e6e6e, 0xff6f6f6f,
            0xff707070, 0xff717171, 0xff727272, 0xff737373, 0xff747474, 0xff757575, 0xff767676, 0xff777777,
            0xff787878, 0xff797979, 0xff7a7a7a, 0xff7b7b7b, 0xff7c7c7c, 0xff7d7d7d, 0xff7e7e7e, 0xff7f7f7f,
            0xff808080, 0xff818181, 0xff828282, 0xff838383, 0xff848484, 0xff858585, 0xff868686, 0xff878787,
            0xff888888, 0xff898989, 0xff8a8a8a, 0xff8b8b8b, 0xff8c8c8c, 0xff8d8d8d, 0xff8e8e8e, 0xff8f8f8f,
            0xff909090, 0xff919191, 0xff929292, 0xff939393, 0xff949494, 0xff959595, 0xff969696, 0xff979797,
            0xff989898, 0xff999999, 0xff9a9a9a, 0xff9b9b9b, 0xff9c9c9c, 0xff9d9d9d, 0xff9e9e9e, 0xff9f9f9f,
            0xffa0a0a0, 0xffa1a1a1, 0xffa2a2a2, 0xffa3a3a3, 0xffa4a4a4, 0xffa5a5a5, 0xffa6a6a6, 0xffa7a7a7,
            0xffa8a8a8, 0xffa9a9a9, 0xffaaaaaa, 0xffababab, 0xffacacac, 0xffadadad, 0xffaeaeae, 0xffafafaf,
            0xffb0b0b0, 0xffb1b1b1, 0xffb2b2b2, 0xffb3b3b3, 0xffb4b4b4, 0xffb5b5b5, 0xffb6b6b6, 0xffb7b7b7,
            0xffb8b8b8, 0xffb9b9b9, 0xffbababa, 0xffbbbbbb, 0xffbcbcbc, 0xffbdbdbd, 0xffbebebe, 0xffbfbfbf,
            0xffc0c0c0, 0xffc1c1c1, 0xffc2c2c2, 0xffc3c3c3, 0xffc4c4c4, 0xffc5c5c5, 0xffc6c6c6, 0xffc7c7c7,
            0xffc8c8c8, 0xffc9c9c9, 0xffcacaca, 0xffcbcbcb, 0xffcccccc, 0xffcdcdcd, 0xffcecece, 0xffcfcfcf,
            0xffd0d0d0, 0xffd1d1d1, 0xffd2d2d2, 0xffd3d3d3, 0xffd4d4d4, 0xffd5d5d5, 0xffd6d6d6, 0xffd7d7d7,
            0xffd8d8d8, 0xffd9d9d9, 0xffdadada, 0xffdbdbdb, 0xffdcdcdc, 0xffdddddd, 0xffdedede, 0xffdfdfdf,
            0xffe0e0e0, 0xffe1e1e1, 0xffe2e2e2, 0xffe3e3e3, 0xffe4e4e4, 0xffe5e5e5, 0xffe6e6e6, 0xffe7e7e7,
            0xffe8e8e8, 0xffe9e9e9, 0xffeaeaea, 0xffebebeb, 0xffececec, 0xffededed, 0xffeeeeee, 0xffefefef,
            0xfff0f0f0, 0xfff1f1f1, 0xfff2f2f2, 0xfff3f3f3, 0xfff4f4f4, 0xfff5f5f5, 0xfff6f6f6, 0xfff7f7f7,
            0xfff8f8f8, 0xfff9f9f9, 0xfffafafa, 0xfffbfbfb, 0xfffcfcfc, 0xfffdfdfd, 0xfffefefe, 0xffffffff,
        };
        addColourMap(tr("Grey"), colours_mono);
    }
}
